{"mappings":"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","sources":["lib/index.ts","lib/credentials.ts","lib/network.ts","lib/signaling.ts","lib/peer.ts","lib/latency.ts"],"sourcesContent":["import { PokiTurnMatch } from './credentials'\nimport { PeerConfiguration } from './types'\n\nexport const DefaultSignalingURL = process.env.NODE_ENV === 'production' ? 'wss://netlib.poki.io/v0/signaling' : 'ws://localhost:8080/v0/signaling'\n\nexport const DefaultRTCConfiguration: PeerConfiguration = {\n  iceServers: [\n    {\n      urls: [\n        'stun:stun.l.google.com:19302'\n      ]\n    },\n    {\n      urls: PokiTurnMatch\n    }\n  ]\n}\n\nexport const DefaultDataChannels: { [label: string]: RTCDataChannelInit } = {\n  reliable: {\n    ordered: true\n  },\n  unreliable: {\n    ordered: true,\n    maxRetransmits: 0\n  },\n  control: {\n    ordered: false\n  }\n}\n\nexport { default as Network } from './network'\n","import Signaling from './signaling'\nimport { CredentialsPacket, PeerConfiguration } from './types'\n\nconst FetchTimeout = 5000\nexport const PokiTurnMatch = 'turn:turn.rtc.poki.com'\n\nexport default class Credentials {\n  private cachedCredentials?: CredentialsPacket\n  private cachedCredentialsExpireAt: number = 0\n\n  private runningPromise?: Promise<CredentialsPacket>\n\n  constructor (public signaling: Signaling) {\n  }\n\n  async fillCredentials (config: PeerConfiguration): Promise<RTCConfiguration> {\n    const cloned = JSON.parse(JSON.stringify(config)) as PeerConfiguration\n\n    if (process.env.NODE_ENV === 'test') {\n      return cloned\n    }\n\n    if (config.testproxyURL !== undefined) {\n      return cloned\n    }\n\n    const hasPokiTurn = cloned.iceServers?.some(s => s.urls === PokiTurnMatch || s.urls.includes(PokiTurnMatch)) ?? false\n    if (!hasPokiTurn || cloned.iceServers === undefined) {\n      return cloned\n    }\n    if (this.runningPromise === undefined) {\n      this.runningPromise = new Promise<CredentialsPacket>((resolve) => {\n        if (this.cachedCredentials != null && this.cachedCredentialsExpireAt > performance.now()) {\n          resolve(this.cachedCredentials)\n          return\n        }\n        void this.signaling.request({\n          type: 'credentials'\n        }).then(credentials => {\n          if (credentials.type === 'credentials') {\n            this.cachedCredentials = credentials\n            this.cachedCredentialsExpireAt = performance.now() + (((credentials.lifetime ?? 0) - 60) * 1000)\n            resolve(credentials)\n          }\n        }).catch(() => {\n          resolve({ type: 'credentials' })\n          this.cachedCredentials = { type: 'credentials' }\n          this.cachedCredentialsExpireAt = performance.now() + FetchTimeout\n        })\n        setTimeout(() => {\n          resolve({ type: 'credentials' })\n          this.cachedCredentials = { type: 'credentials' }\n          this.cachedCredentialsExpireAt = performance.now() + FetchTimeout\n        }, FetchTimeout)\n      })\n    }\n    const credentials = await this.runningPromise\n    this.runningPromise = undefined\n\n    if (credentials.url === undefined) {\n      return cloned\n    }\n\n    cloned.iceServers.forEach(s => {\n      if (s.urls === PokiTurnMatch || s.urls.includes(PokiTurnMatch)) {\n        s.urls = credentials.url ?? ''\n        s.username = credentials.username\n        s.credential = credentials.credential\n      }\n    })\n    return cloned\n  }\n}\n","import { EventEmitter } from 'eventemitter3'\n\nimport { DefaultDataChannels, DefaultRTCConfiguration, DefaultSignalingURL } from '.'\nimport { LobbyListEntry, LobbySettings, PeerConfiguration } from './types'\nimport Signaling, { SignalingError } from './signaling'\nimport Peer from './peer'\nimport Credentials from './credentials'\n\ninterface NetworkListeners {\n  ready: () => void | Promise<void>\n  lobby: (code: string, lobbyInfo: LobbyListEntry) => void | Promise<void>\n  leader: (leader: string) => void | Promise<void>\n  lobbyUpdated: (code: string, settings: LobbySettings) => void | Promise<void>\n  connecting: (peer: Peer) => void | Promise<void>\n  connected: (peer: Peer) => void | Promise<void>\n  reconnecting: (peer: Peer) => void | Promise<void>\n  reconnected: (peer: Peer) => void | Promise<void>\n  disconnected: (peer: Peer) => void | Promise<void>\n  signalingreconnected: () => void | Promise<void>\n  failed: () => void | Promise<void>\n  message: (peer: Peer, channel: string, data: string | Blob | ArrayBuffer | ArrayBufferView) => void | Promise<void>\n  close: (reason?: string) => void | Promise<void>\n  rtcerror: (e: Event) => void | Promise<void> // TODO: Figure out how to make this e type be RTCErrorEvent\n  signalingerror: (e: SignalingError) => void | Promise<void>\n}\n\nexport default class Network extends EventEmitter<NetworkListeners> {\n  private _closing: boolean = false\n  public readonly peers: Map<string, Peer>\n  private readonly signaling: Signaling\n  private readonly credentials: Credentials\n  public dataChannels: { [label: string]: RTCDataChannelInit } = DefaultDataChannels\n\n  public log: (...data: any[]) => void = (...args: any[]) => {} // console.log\n\n  private readonly unloadListener: () => void\n\n  constructor (public readonly gameID: string, private readonly rtcConfig: PeerConfiguration = DefaultRTCConfiguration, signalingURL: string = DefaultSignalingURL) {\n    super()\n    this.peers = new Map<string, Peer>()\n    this.signaling = new Signaling(this, this.peers, signalingURL)\n    this.credentials = new Credentials(this.signaling)\n\n    this.unloadListener = () => this.close()\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unload', this.unloadListener)\n    }\n  }\n\n  async list (filter?: object): Promise<LobbyListEntry[]> {\n    if (this._closing || this.signaling.receivedID === undefined) {\n      return []\n    }\n    const filterString = (filter != null) ? JSON.stringify(filter) : undefined\n    const reply = await this.signaling.request({\n      type: 'list',\n      filter: filterString\n    })\n    if (reply.type === 'lobbies') {\n      return reply.lobbies\n    }\n    return []\n  }\n\n  async create (settings?: LobbySettings): Promise<string> {\n    if (this._closing || this.signaling.receivedID === undefined) {\n      return ''\n    }\n    const reply = await this.signaling.request({\n      type: 'create',\n      ...settings\n    })\n    if (reply.type === 'joined') {\n      return reply.lobbyInfo.code\n    }\n    return ''\n  }\n\n  async join (lobby: string, password?: string): Promise<LobbyListEntry | undefined> {\n    if (this._closing || this.signaling.receivedID === undefined) {\n      return undefined\n    }\n    const reply = await this.signaling.request({\n      type: 'join',\n      lobby,\n      password\n    })\n    if (reply.type === 'joined') {\n      return reply.lobbyInfo\n    }\n    return undefined\n  }\n\n  async setLobbySettings (settings: LobbySettings): Promise<true | Error> {\n    if (this._closing || this.signaling.receivedID === undefined) {\n      return new Error('network is closing or not connected')\n    }\n    await this.signaling.request({\n      type: 'lobbyUpdate',\n      ...settings\n    })\n    return true\n  }\n\n  close (reason?: string): void {\n    if (this._closing || this.signaling.receivedID === undefined) {\n      return\n    }\n    this._closing = true\n    this.emit('close', reason)\n\n    if (this.id !== '') {\n      this.signaling.send({\n        type: 'close',\n        id: this.id,\n        reason: reason ?? 'normal closure'\n      })\n    }\n\n    this.peers.forEach(peer => peer.close(reason))\n    this.signaling.close()\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('unload', this.unloadListener)\n    }\n  }\n\n  send (channel: string, peerID: string, data: string | Blob | ArrayBuffer | ArrayBufferView): void {\n    if (!(channel in this.dataChannels)) {\n      throw new Error('unknown channel ' + channel)\n    }\n    if (this.peers.has(peerID)) {\n      this.peers.get(peerID)?.send(channel, data)\n    }\n  }\n\n  broadcast (channel: string, data: string | Blob | ArrayBuffer | ArrayBufferView): void {\n    if (!(channel in this.dataChannels)) {\n      throw new Error('unknown channel ' + channel)\n    }\n    this.peers.forEach(peer => peer.send(channel, data))\n  }\n\n  /**\n   * @internal\n   */\n  async _addPeer (id: string, polite: boolean): Promise<void> {\n    const config = await this.credentials.fillCredentials(this.rtcConfig)\n\n    config.iceServers = config.iceServers?.filter(server => !(server.urls.includes('turn:') && server.username === undefined))\n\n    const peer = new Peer(this, this.signaling, id, config, polite)\n    this.peers.set(id, peer)\n  }\n\n  /**\n   * @internal\n   */\n  _removePeer (peer: Peer): boolean {\n    return this.peers.delete(peer.id)\n  }\n\n  /**\n   * @internal\n   */\n  _prefetchTURNCredentials (): void {\n    this.credentials.fillCredentials(this.rtcConfig).catch(() => {})\n  }\n\n  /**\n   * @internal\n   */\n  _onSignalingError (e: SignalingError): void {\n    this.emit('signalingerror', e)\n    if (this.listenerCount('signalingerror') === 0) {\n      console.error('signallingerror not handled:', e)\n    }\n    void this.signaling.event('signaling', 'error', { error: JSON.stringify(e) })\n  }\n\n  /**\n   * @internal\n   */\n  _forceReconnectSignaling (): void {\n    this.signaling.close()\n  }\n\n  get id (): string {\n    return this.signaling.receivedID ?? ''\n  }\n\n  get closing (): boolean {\n    return this._closing\n  }\n\n  get size (): number {\n    return this.peers.size\n  }\n\n  get currentLobby (): string | undefined {\n    return this.signaling.currentLobby\n  }\n\n  get currentLobbyInfo (): LobbyListEntry | undefined {\n    return this.signaling.currentLobbyInfo\n  }\n\n  get currentLeader (): string | null | undefined {\n    return this.signaling.currentLeader\n  }\n}\n","import { EventEmitter } from 'eventemitter3'\nimport Network from './network'\nimport Peer from './peer'\nimport { LobbyListEntry, SignalingPacketTypes } from './types'\n\ninterface SignalingListeners {\n  credentials: (data: SignalingPacketTypes) => void | Promise<void>\n}\n\nexport default class Signaling extends EventEmitter<SignalingListeners> {\n  private readonly url: string\n  private ws: WebSocket\n  private reconnectAttempt: number = 0\n  private reconnecting: boolean = false\n  receivedID?: string\n  receivedSecret?: string\n  currentLobby?: string\n  currentLobbyInfo?: LobbyListEntry\n  currentLeader?: string\n  currentTerm: number = 0\n\n  private readonly connections: Map<string, Peer>\n\n  private readonly replayQueue: Map<string, SignalingPacketTypes[]>\n\n  private readonly requests: Map<string, RequestHandler> = new Map()\n\n  constructor (private readonly network: Network, peers: Map<string, Peer>, url: string) {\n    super()\n\n    this.url = url\n    this.connections = peers\n    this.replayQueue = new Map()\n\n    this.ws = this.connect()\n  }\n\n  private connect (): WebSocket {\n    const ws = new WebSocket(this.url)\n    const onOpen = (): void => {\n      this.reconnectAttempt = 0\n      this.reconnecting = false\n      this.send({\n        type: 'hello',\n        game: this.network.gameID,\n        id: this.receivedID,\n        secret: this.receivedSecret\n      })\n    }\n    const onError = (e: Event): void => {\n      const error = new SignalingError('socket-error', 'unexpected websocket error', e)\n      this.network._onSignalingError(error)\n      if (ws.readyState === WebSocket.CLOSED) {\n        this.reconnecting = false\n        ws.removeEventListener('open', onOpen)\n        ws.removeEventListener('error', onError)\n        ws.removeEventListener('message', onMessage)\n        ws.removeEventListener('close', onClose)\n\n        // Don't try to reconnect too quickly, give the server a chance\n        // to store our disconnection in the db, so when we reconnect\n        // it recognizes us.\n        setTimeout(() => {\n          this.reconnect()\n        }, 100)\n      }\n    }\n    const onMessage = (ev: MessageEvent): void => {\n      this.handleSignalingMessage(ev.data).catch(_ => {})\n    }\n    const onClose = (): void => {\n      if (!this.network.closing) {\n        const error = new SignalingError('socket-error', 'signaling socket closed')\n        this.network._onSignalingError(error)\n      }\n      ws.removeEventListener('open', onOpen)\n      ws.removeEventListener('error', onError)\n      ws.removeEventListener('message', onMessage)\n      ws.removeEventListener('close', onClose)\n\n      // Don't try to reconnect too quickly, give the server a chance\n      // to store our disconnection in the db, so when we reconnect\n      // it recognizes us.\n      setTimeout(() => {\n        this.reconnect()\n      }, 100)\n    }\n    ws.addEventListener('open', onOpen)\n    ws.addEventListener('error', onError)\n    ws.addEventListener('message', onMessage)\n    ws.addEventListener('close', onClose)\n    return ws\n  }\n\n  private reconnect (): void {\n    if (this.reconnecting || this.network.closing) {\n      return\n    }\n\n    this.close()\n\n    this.requests.forEach((r) => r.reject(new SignalingError('socket-error', 'signaling socket closed')))\n    this.requests.clear()\n\n    if (this.reconnectAttempt > 42) {\n      this.network.emit('failed')\n      this.network._onSignalingError(new SignalingError('socket-error', 'giving up on reconnecting to signaling server'))\n      return\n    }\n    void this.event('signaling', 'attempt-reconnect')\n    this.reconnecting = true\n    setTimeout(() => {\n      this.ws = this.connect()\n    }, Math.random() * 100 * this.reconnectAttempt)\n    this.reconnectAttempt += 1\n  }\n\n  close (): void {\n    this.ws.close()\n  }\n\n  async request (packet: SignalingPacketTypes): Promise<SignalingPacketTypes> {\n    return await new Promise<SignalingPacketTypes>((resolve, reject) => {\n      if (this.ws.readyState !== WebSocket.OPEN) {\n        reject(new SignalingError('socket-error', 'signaling socket not open'))\n      }\n      const rid = Math.random().toString(36).slice(2)\n      packet.rid = rid\n      this.network.log('requesting signaling packet:', packet.type)\n      const data = JSON.stringify(packet)\n      this.ws.send(data)\n      this.requests.set(rid, { resolve, reject })\n    })\n  }\n\n  send (packet: SignalingPacketTypes): void {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      this.network.log('sending signaling packet:', packet.type)\n      const data = JSON.stringify(packet)\n      this.ws.send(data)\n    }\n  }\n\n  private async handleSignalingMessage (data: string): Promise<void> {\n    try {\n      const packet = JSON.parse(data) as SignalingPacketTypes\n      this.network.log('signaling packet received:', packet.type)\n      if (packet.rid !== undefined) {\n        const request = this.requests.get(packet.rid)\n        if (request != null) {\n          this.requests.delete(packet.rid)\n          if (packet.type === 'error') {\n            request.reject(new SignalingError('server-error', packet.message, undefined, packet.code))\n          } else {\n            request.resolve(packet)\n          }\n        }\n      }\n      switch (packet.type) {\n        case 'error':\n          {\n            const error = new SignalingError('server-error', packet.message, undefined, packet.code)\n            this.network._onSignalingError(error)\n            if (packet.code === 'missing-recipient' && packet.error?.recipient !== undefined) {\n              const id = packet.error?.recipient\n              if (this.connections.has(id)) {\n                this.network.log('cleaning up missing recipient', id)\n                this.connections.get(id)?.close('missing-recipient')\n              }\n            } else if (packet.code === 'reconnect-failed') {\n              this.network.close('reconnect failed')\n            }\n          }\n          break\n\n        case 'welcome':\n          if (this.receivedID !== undefined) {\n            this.network.log('signaling reconnected')\n            this.network.emit('signalingreconnected')\n            return\n          }\n          if (packet.id === '') {\n            throw new Error('missing id on received welcome packet')\n          }\n          this.receivedID = packet.id\n          this.receivedSecret = packet.secret\n          this.network.emit('ready')\n          this.network._prefetchTURNCredentials()\n          break\n\n        case 'joined':\n          {\n            const code = packet.lobbyInfo.code\n            if (code === '') {\n              throw new Error('missing lobby on received connect packet')\n            }\n            this.currentLobby = code\n            this.currentLeader = packet.lobbyInfo.leader\n            this.currentTerm = packet.lobbyInfo.term\n            this.network.emit('lobby', code, packet.lobbyInfo)\n            if (this.currentLeader !== undefined) {\n              this.network.emit('leader', this.currentLeader)\n            }\n          }\n          break\n\n        case 'leader':\n          if (this.currentLobby === undefined) {\n            // We're not in a lobby, ignore leader packets.\n            return\n          }\n          if (packet.term > this.currentTerm) {\n            this.currentLeader = packet.leader\n            this.currentTerm = packet.term\n            this.network.emit('leader', packet.leader)\n          }\n          break\n\n        case 'lobbyUpdated':\n          if (this.currentLobby === undefined) {\n            // We're not in a lobby, ignore updated packets.\n            return\n          }\n          this.currentLobbyInfo = packet.lobbyInfo\n          this.network.emit('lobbyUpdated', packet.lobbyInfo.code, packet.lobbyInfo)\n          break\n\n        case 'connect':\n          if (this.receivedID === packet.id) {\n            return // Skip self\n          }\n          await this.network._addPeer(packet.id, packet.polite)\n          for (const p of this.replayQueue.get(packet.id) ?? []) {\n            await this.connections.get(packet.id)?._onSignalingMessage(p)\n          }\n          this.replayQueue.delete(packet.id)\n          break\n        case 'disconnect':\n          if (this.connections.has(packet.id)) {\n            this.connections.get(packet.id)?.close()\n          }\n          break\n\n        case 'candidate':\n        case 'description':\n          if (this.connections.has(packet.source)) {\n            await this.connections.get(packet.source)?._onSignalingMessage(packet)\n          } else {\n            const queue = this.replayQueue.get(packet.source) ?? []\n            queue.push(packet)\n            this.replayQueue.set(packet.source, queue)\n          }\n          break\n        case 'credentials':\n          this.emit('credentials', packet)\n          break\n        case 'ping':\n          break\n      }\n    } catch (e) {\n      const error = new SignalingError('unknown-error', e as string)\n      this.network._onSignalingError(error)\n    }\n  }\n\n  async event (category: string, action: string, data?: { [key: string]: string }): Promise<void> {\n    return await new Promise(resolve => {\n      setTimeout(() => {\n        this.send({\n          type: 'event',\n          game: this.network.gameID,\n          lobby: this.currentLobby,\n          peer: this.network.id,\n          category,\n          action,\n          data\n        })\n        resolve()\n      }, 0)\n    })\n  }\n}\n\ninterface RequestHandler {\n  resolve: (data: SignalingPacketTypes) => void\n  reject: (reason?: any) => void\n}\n\nexport class SignalingError {\n  /**\n   * @internal\n   */\n  constructor (public type: 'unknown-error' | 'socket-error' | 'server-error', public message: string, public event?: Event, public code?: string) {\n  }\n\n  public toString (): string {\n    return `[${this.type}: ${this.message}]`\n  }\n}\n","import Network from './network'\nimport Signaling, { SignalingError } from './signaling'\nimport Latency from './latency'\nimport { PeerConfiguration, SignalingPacketTypes } from './types'\n\nconst LatencyRestartIceThreshold = 1000 // ms\nconst ReconnectionWindow = 8000 // ms\n\nexport default class Peer {\n  public readonly conn: RTCPeerConnection\n\n  // Signaling state:\n  private makingOffer: boolean = false\n  private ignoreOffer: boolean = false\n  private isSettingRemoteAnswerPending: boolean = false\n\n  // Connection state:\n  private opened: boolean = false\n  private closing: boolean = false\n  private reconnecting: boolean = false\n  private abortReconnectionAt: number = 0\n  private allowNextManualRestartIceAt: number = 0\n\n  public latency: Latency = new Latency(this)\n  private lastMessageReceivedAt: number = 0\n\n  private politenessTimeout?: ReturnType<typeof setTimeout>\n  private reportLatencyEventTimeout?: ReturnType<typeof setTimeout>\n  private readonly checkStateInterval: ReturnType<typeof setInterval>\n  private readonly channels: { [name: string]: RTCDataChannel }\n\n  private readonly testSessionWrapper?: (desc: RTCSessionDescription, config: PeerConfiguration, selfID: string, otherID: string) => Promise<void>\n\n  /**\n   * @internal\n   */\n  constructor (private readonly network: Network, private readonly signaling: Signaling, public readonly id: string, public readonly config: PeerConfiguration, private readonly polite: boolean) {\n    this.channels = {}\n    this.network.log('creating peer')\n\n    this.testSessionWrapper = undefined\n\n    this.conn = new RTCPeerConnection(config)\n    if (config.testproxyURL === undefined) { // we dont push candidates in a test setup\n      this.conn.addEventListener('icecandidate', e => {\n        const candidate = e.candidate\n        if (candidate !== null) {\n          signaling.send({\n            type: 'candidate',\n            source: this.network.id,\n            recipient: this.id,\n            candidate\n          })\n        }\n      })\n    } else {\n      this.testSessionWrapper = wrapSessionDescription\n    }\n    this.conn.addEventListener('negotiationneeded', () => {\n      this.politenessTimeout = setTimeout(() => {\n        (async () => {\n          try {\n            if (this.closing) {\n              return\n            }\n            this.makingOffer = true\n            if (process.env.NODE_ENV === 'test') {\n              // Running tests with node and the wrtc package causes the\n              // setLocalDescription to fail with undefined as argment.\n              await this.conn.setLocalDescription(await this.conn.createOffer())\n            } else {\n              await this.conn.setLocalDescription()\n            }\n            const description = this.conn.localDescription\n            if (description != null) {\n              await this.testSessionWrapper?.(description, this.config, this.network.id, this.id)\n              this.signaling.send({\n                type: 'description',\n                source: this.network.id,\n                recipient: this.id,\n                description\n              })\n            }\n          } catch (e) {\n            const error = new SignalingError('unknown-error', e as string)\n            this.network._onSignalingError(error)\n          } finally {\n            this.makingOffer = false\n          }\n        })().catch(_ => {})\n      }, this.polite ? 100 : 0)\n    })\n\n    this.checkStateInterval = setInterval(() => {\n      this.checkState()\n    }, 500)\n    this.conn.addEventListener('signalingstatechange', () => this.checkState())\n    this.conn.addEventListener('connectionstatechange', () => this.checkState())\n    this.conn.addEventListener('iceconnectionstatechange', () => this.checkState())\n\n    this.network.emit('connecting', this)\n\n    let i = 0\n    for (const label in this.network.dataChannels) {\n      const chan = this.conn.createDataChannel(label, {\n        ...this.network.dataChannels[label],\n        id: i++,\n        negotiated: true\n      })\n      chan.binaryType = 'arraybuffer'\n      chan.addEventListener('error', e => this.onError(e))\n      chan.addEventListener('closing', () => this.checkState())\n      chan.addEventListener('close', () => this.checkState())\n      chan.addEventListener('open', () => {\n        if (!this.opened && !Object.values(this.channels).some(c => c.readyState !== 'open')) {\n          if ('control' in this.channels) {\n            this.latency = new Latency(this, this.channels.control)\n          }\n\n          if (this.politenessTimeout !== undefined) {\n            clearTimeout(this.politenessTimeout)\n          }\n\n          this.signaling.send({\n            type: 'connected',\n            id: this.id\n          })\n          this.opened = true\n          this.network.emit('connected', this)\n          void this.signaling.event('rtc', 'connected', { target: this.id })\n          this.reportLatencyEventTimeout = setTimeout(() => {\n            void this.signaling.event('rtc', 'avg-latency-at-10s', { target: this.id, latency: `${this.latency.average}` })\n          }, 10000)\n        }\n      })\n      chan.addEventListener('message', e => {\n        this.lastMessageReceivedAt = performance.now()\n        if (label !== 'control') {\n          this.network.emit('message', this, label, e.data)\n        }\n      })\n      this.channels[label] = chan\n    }\n  }\n\n  public close (reason?: string): void {\n    if (this.closing) {\n      return\n    }\n    this.closing = true\n\n    // Inform signaling server that the peer has been disconnected:\n    this.signaling.send({\n      type: 'disconnected',\n      id: this.id,\n      reason: reason ?? 'normal closure'\n    })\n\n    Object.values(this.channels).forEach(c => c.close())\n    this.conn.close()\n    this.network._removePeer(this)\n    if (this.checkStateInterval != null) {\n      clearInterval(this.checkStateInterval)\n    }\n    if (this.reportLatencyEventTimeout != null) {\n      clearTimeout(this.reportLatencyEventTimeout)\n    }\n\n    if (this.opened) {\n      this.network.emit('disconnected', this)\n      void this.signaling.event('rtc', 'disconnected', {\n        target: this.id,\n        reason: reason ?? '',\n        reconnecting: this.reconnecting ? 'true' : 'false'\n      })\n    }\n  }\n\n  private checkState (): void {\n    const now = performance.now()\n    const connectionState = this.conn.connectionState ?? this.conn.iceConnectionState\n    if (this.closing) {\n      return\n    }\n    if (!this.opened) {\n      if (connectionState === 'failed') {\n        this.close('connecting failed')\n      }\n      return\n    }\n    if (Object.values(this.channels).some(c => c.readyState !== 'open')) {\n      this.close('data channel closed')\n    }\n    // console.log('state', this.id, this.conn.connectionState, this.conn.iceConnectionState, Object.values(this.channels).map(c => c.readyState))\n    if (!this.reconnecting && (connectionState === 'disconnected' || connectionState === 'failed')) {\n      this.reconnecting = true\n      this.abortReconnectionAt = now + ReconnectionWindow\n      this.network.emit('reconnecting', this)\n      void this.signaling.event('rtc', 'attempt-reconnect', { target: this.id })\n    } else if (this.reconnecting && connectionState === 'connected') {\n      this.reconnecting = false\n      this.network.emit('reconnected', this)\n      void this.signaling.event('rtc', 'attempt-reconnected', { target: this.id })\n    } else if (this.reconnecting && now > this.abortReconnectionAt) {\n      this.close('reconnection timed out')\n    }\n    if (!this.reconnecting && 'control' in this.channels) {\n      const lastPing = this.lastMessageReceivedAt\n      if (lastPing !== 0) {\n        const delta = now - lastPing\n        if (delta > LatencyRestartIceThreshold && now > this.allowNextManualRestartIceAt) {\n          this.allowNextManualRestartIceAt = now + 10000\n          this.conn.restartIce()\n        }\n      }\n    }\n  }\n\n  private onError (e: Event): void {\n    this.network.emit('rtcerror', e)\n    if (this.network.listenerCount('rtcerror') === 0) {\n      console.error('rtcerror not handled:', e)\n    }\n    this.checkState()\n    void this.signaling.event('rtc', 'error', { target: this.id, error: JSON.stringify(e) })\n  }\n\n  /**\n   * @internal\n   */\n  async _onSignalingMessage (packet: SignalingPacketTypes): Promise<void> {\n    switch (packet.type) {\n      case 'candidate':\n        if (packet.candidate != null) {\n          try {\n            await this.conn.addIceCandidate(packet.candidate)\n          } catch (e) {\n            if (!this.ignoreOffer) {\n              throw e\n            }\n          }\n        }\n        break\n\n      case 'description':\n        {\n          const { description } = packet\n          const readyForOffer =\n            !this.makingOffer &&\n            (this.conn.signalingState === 'stable' || this.isSettingRemoteAnswerPending)\n          const offerCollision = description.type === 'offer' && !readyForOffer\n\n          this.ignoreOffer = !this.polite && offerCollision\n          if (this.ignoreOffer) {\n            return\n          }\n          this.isSettingRemoteAnswerPending = description.type === 'answer'\n          await this.conn.setRemoteDescription(description)\n          this.isSettingRemoteAnswerPending = false\n          if (description.type === 'offer') {\n            if (process.env.NODE_ENV === 'test') {\n              await this.conn.setLocalDescription(await this.conn.createAnswer())\n            } else {\n              await this.conn.setLocalDescription()\n            }\n            const description = this.conn.localDescription\n            if (description != null) {\n              await this.testSessionWrapper?.(description, this.config, this.network.id, this.id)\n              this.signaling.send({\n                type: 'description',\n                source: this.network.id,\n                recipient: this.id,\n                description\n              })\n            }\n          }\n        }\n        break\n    }\n  }\n\n  send (channel: string, data: string | Blob | ArrayBuffer | ArrayBufferView): void {\n    if (!(channel in this.channels)) {\n      throw new Error('unknown channel ' + channel)\n    }\n    const chan = this.channels[channel]\n    if (chan.readyState === 'open') {\n      chan.send(data as any)\n    }\n  }\n\n  toString (): string {\n    return `[Peer: ${this.id}]`\n  }\n}\n\nasync function wrapSessionDescription (desc: RTCSessionDescription, config: PeerConfiguration, selfID: string, otherID: string): Promise<void> {\n  if (config.testproxyURL === undefined) {\n    return\n  }\n\n  let lines = desc.sdp.split('\\r\\n')\n  lines = lines.filter(l => {\n    return !l.startsWith('a=candidate') || (l.includes('127.0.0.1') && l.includes('udp'))\n  })\n\n  for (let i = 0; i < lines.length; i++) {\n    const l = lines[i]\n    if (l.startsWith('a=candidate') && l.includes('127.0.0.1')) {\n      const orignalPort = l.split('127.0.0.1 ').pop()?.split(' ')[0] // find port\n      if (orignalPort != null) {\n        const resp = await fetch(`${config.testproxyURL}/create?id=${selfID + otherID}&port=${orignalPort}`)\n        const substitudePort = await resp.text()\n        lines[i] = l.replaceAll(` ${orignalPort} `, ` ${substitudePort} `)\n      }\n    }\n  }\n\n  ;(desc as any).sdp = lines.join('\\r\\n')\n}\n","import Peer from './peer'\n\nconst PingInterval = 500\nconst WindowSampleSize = 50\n\nconst PING = 'ping'\nconst PONG = 'pong'\n\nexport default class Latency {\n  private readonly window: number[] = []\n  private lastPingSentAt: number = 0\n\n  public last: number = 0\n  public average: number = 0\n  public jitter: number = 0\n  public max: number = 0\n  public min: number = 0\n\n  /**\n   * @internal\n   */\n  constructor (private readonly peer: Peer, private readonly control?: RTCDataChannel) {\n    if (control !== undefined) {\n      this.ping()\n\n      control.addEventListener('message', e => this.onMessage(e.data))\n    }\n  }\n\n  private ping (): void {\n    this.lastPingSentAt = performance.now()\n    if (this.control?.readyState === 'open') {\n      this.control?.send(PING)\n    }\n  }\n\n  private onMessage (data: string): void {\n    if (data === PING) {\n      if (this.control?.readyState === 'open') {\n        this.control?.send(PONG)\n      }\n      return\n    }\n    if (data !== PONG) {\n      return\n    }\n\n    const now = performance.now()\n    const delta = now - this.lastPingSentAt\n\n    this.window.unshift(delta)\n    if (this.window.length > WindowSampleSize) {\n      this.window.pop()\n    }\n\n    this.last = delta\n    this.max = Math.max(...this.window)\n    this.min = Math.min(...this.window)\n\n    this.average = this.window.reduce((a, b) => a + b, 0) / this.window.length\n\n    if (this.window.length > 1) {\n      this.jitter = this.window.slice(1).map((x, i) => Math.abs(x - this.window[i])).reduce((a, b) => a + b, 0) / (this.window.length - 1)\n    }\n\n    setTimeout(() => this.ping(), PingInterval - delta)\n  }\n}\n"],"names":[],"version":3,"file":"netlib.js.map"}